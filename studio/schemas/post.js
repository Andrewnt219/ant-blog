// TODO generate slug on publish action
export default {
  name: 'post',
  title: 'Post',
  type: 'document',

  initialValue: {
    isArchived: false,
    publishedAt: new Date().toISOString(),
    isPinned: false,
    views: 0,
    // author: {
    // 	_ref: "efb8191b-4ada-41cf-9465-e3d348a5c0eb", // Rose
    // },
  },

  fields: [
    {
      name: 'isPinned',
      title: 'Pinned Post',
      type: 'boolean',
      description: "For homepage's carousel",
    },

    {
      name: 'title',
      title: 'Title',
      type: 'string',
      validation: (Rule) => [
        Rule.required().error('Em quÃªn Ä‘áº·t tá»±a nÃ¨.'),
        Rule.max(70).warning('Too long'),
      ],
    },

    {
      name: 'slug',
      title: 'Slug',
      type: 'slug',
      options: {
        source: 'title',
        maxLength: 96,
      },
      validation: (Rule) => Rule.required().error('Required'),
    },

    {
      name: 'categories',
      title: 'Categories',
      type: 'array',
      of: [
        {
          type: 'reference',
          name: 'mainCategory',
          title: 'Main Category',
          to: { type: 'category' },
        },
        {
          type: 'reference',
          to: { type: 'category' },
          title: 'Sub Category',
          name: 'subcategory',
        },
      ],
      validation: (Rule) => [
        Rule.required().min(1).error('Required'),
        Rule.unique().error('Duplicate'),
        Rule.custom((categories) => {
          if (
            categories.filter((category) => category._type === 'mainCategory')
              .length > 1
          ) {
            return 'Only one main category';
          }

          if (
            categories.length >
            new Set(categories.map((category) => category._ref)).size
          ) {
            return 'Duplicate category';
          }

          if (
            categories.filter((category) => category._type === 'mainCategory')
              .length === 0
          ) {
            return 'Main category is required';
          }

          return true;
        }),
      ],
    },

    {
      name: 'body',
      title: 'Body',
      type: 'blockContent',
      validation: (Rule) => Rule.required().error('Body is required'),
      options: {
        metadata: ['lqip'],
      },
    },

    {
      name: 'mainImage',
      title: 'Main image',
      type: 'image',
      fields: [
        {
          name: 'alt',
          title: 'Alternate text',
          type: 'string',
          options: {
            isHightlighted: true,
          },
        },
      ],
      options: {
        hotspot: true,
        metadata: ['lqip'],
      },
      validation: (Rule) => Rule.required().error('Thumbnail is required'),
    },

    {
      name: 'snippet',
      title: 'Content snippet',
      type: 'text',
      description: 'A short introduction about the post',
      validation: (Rule) => [
        Rule.required().error('Snippet is required'),
        Rule.max(300).warning('Snippet is too long'),
      ],
      rows: 3,
    },

    {
      name: 'publishedAt',
      title: 'Published at',
      type: 'datetime',
      options: {
        dateFormat: 'MMM DD YYYY',
      },
      validation: (Rule) => Rule.required().error('Publish date is required'),
      description: 'Current time is generated by default.',
    },

    {
      name: 'author',
      title: 'Author',
      type: 'reference',
      to: { type: 'author' },
      validation: (Rule) => Rule.required().error('Author is required'),
    },

    {
      name: 'isArchived',
      title: 'Archived',
      type: 'boolean',
      description: 'Hide from the web',
      validation: (Rule) =>
        Rule.custom((isArchived, context) => {
          if (context.document.isPinned && isArchived) {
            return 'Cannot archive because post is pinned';
          }

          return true;
        }),
    },

    {
      name: 'views',
      title: 'Views',
      type: 'number',
      readOnly: true,
    },
  ],

  preview: {
    select: {
      title: 'title',
      author: 'author.name',
      views: 'views',
      media: 'mainImage',
      isPinned: 'isPinned',
      isArchived: 'isArchived',
    },
    prepare(selection) {
      const { author, views, isPinned, title, isArchived } = selection;

      let attributedTitle = title;

      if (isArchived) {
        attributedTitle = 'ðŸ“¦ ' + attributedTitle;
      }

      if (isPinned) {
        attributedTitle = 'ðŸ“Œ ' + attributedTitle;
      }

      return {
        ...selection,
        title: attributedTitle,
        subtitle: `By ${author} (${views} view${views > 1 ? 's' : ''})`,
      };
    },
  },

  orderings: [
    {
      title: 'Least views',
      name: 'viewsAsc',
      by: [
        { field: 'views', direction: 'asc' },
        { field: 'title', direction: 'asc' },
      ],
    },
    {
      title: 'Most views',
      name: 'viewsDesc',
      by: [
        { field: 'views', direction: 'desc' },
        { field: 'title', direction: 'asc' },
      ],
    },
  ],
};
